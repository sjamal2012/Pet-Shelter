!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("@angular/core"),require("@angular/common")):"function"==typeof define&&define.amd?define(["@angular/core","@angular/common"],t):"object"==typeof exports?exports["ngx-cookie"]=t(require("@angular/core"),require("@angular/common")):e["ngx-cookie"]=t(e["@angular/core"],e["@angular/common"])}(window,function(e,t){return function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},o.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="/",o(o.s=7)}([function(e,t,o){"use strict";var r=this&&this.__decorate||function(e,t,o,r){var n,i=arguments.length,c=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,r);else for(var u=e.length-1;u>=0;u--)(n=e[u])&&(c=(i<3?n(c):i>3?n(t,o,c):n(t,o))||c);return i>3&&c&&Object.defineProperty(t,o,c),c},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});var i=o(2),c=o(1),u=o(3),s=function(){function e(e){this._optionsProvider=e,this.options=this._optionsProvider.options}return Object.defineProperty(e.prototype,"cookieString",{get:function(){return document.cookie||""},set:function(e){document.cookie=e},enumerable:!0,configurable:!0}),e.prototype.get=function(e){return this._cookieReader()[e]},e.prototype.getObject=function(e){var t=this.get(e);return t?u.safeJsonParse(t):t},e.prototype.getAll=function(){return this._cookieReader()},e.prototype.put=function(e,t,o){this._cookieWriter()(e,t,o)},e.prototype.putObject=function(e,t,o){this.put(e,JSON.stringify(t),o)},e.prototype.remove=function(e,t){this._cookieWriter()(e,void 0,t)},e.prototype.removeAll=function(e){var t=this,o=this.getAll();Object.keys(o).forEach(function(o){t.remove(o,e)})},e.prototype._cookieReader=function(){var e,t,o,r,n,i={},c="",s=this.cookieString;if(s!==c)for(e=(c=s).split("; "),i={},o=0;o<e.length;o++)(r=(t=e[o]).indexOf("="))>0&&(n=u.safeDecodeURIComponent(t.substring(0,r)),u.isBlank(i[n])&&(i[n]=u.safeDecodeURIComponent(t.substring(r+1))));return i},e.prototype._cookieWriter=function(){var e=this;return function(t,o,r){e.cookieString=e._buildCookieString(t,o,r)}},e.prototype._buildCookieString=function(e,t,o){var r=u.mergeOptions(this.options,o),n=r.expires;u.isBlank(t)&&(n="Thu, 01 Jan 1970 00:00:00 GMT",t=""),u.isString(n)&&(n=new Date(n));var i=r.storeUnencoded?t:encodeURIComponent(t),c=encodeURIComponent(e)+"="+i;c+=r.path?";path="+r.path:"",c+=r.domain?";domain="+r.domain:"",c+=n?";expires="+n.toUTCString():"",c+=r.secure?";secure":"";var s=(c+=r.httpOnly?"; HttpOnly":"").length+1;return s>4096&&console.log("Cookie '"+e+"' possibly not set or overflowed because it was too \n      large ("+s+" > 4096 bytes)!"),c},e=r([i.Injectable(),n("design:paramtypes",[c.CookieOptionsProvider])],e)}();t.CookieService=s},function(e,t,o){"use strict";var r=this&&this.__decorate||function(e,t,o,r){var n,i=arguments.length,c=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,r);else for(var u=e.length-1;u>=0;u--)(n=e[u])&&(c=(i<3?n(c):i>3?n(t,o,c):n(t,o))||c);return i>3&&c&&Object.defineProperty(t,o,c),c},n=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},i=this&&this.__param||function(e,t){return function(o,r){t(o,r,e)}};Object.defineProperty(t,"__esModule",{value:!0});var c=o(2),u=o(6),s=o(3);t.COOKIE_OPTIONS=new c.InjectionToken("COOKIE_OPTIONS");var a=function(){function e(e,t){void 0===e&&(e={}),this._injector=t,this.defaultOptions={path:this._injector.get(u.APP_BASE_HREF,"/"),domain:null,expires:null,secure:!1,httpOnly:!1},this._options=s.mergeOptions(this.defaultOptions,e)}return Object.defineProperty(e.prototype,"options",{get:function(){return this._options},enumerable:!0,configurable:!0}),e=r([c.Injectable(),i(0,c.Inject(t.COOKIE_OPTIONS)),n("design:paramtypes",[Object,c.Injector])],e)}();t.CookieOptionsProvider=a},function(t,o){t.exports=e},function(e,t,o){"use strict";function r(e){return void 0!==e&&null!==e}Object.defineProperty(t,"__esModule",{value:!0}),t.isBlank=function(e){return void 0===e||null===e},t.isPresent=r,t.isString=function(e){return"string"==typeof e},t.mergeOptions=function(e,t){return t?{path:r(t.path)?t.path:e.path,domain:r(t.domain)?t.domain:e.domain,expires:r(t.expires)?t.expires:e.expires,secure:r(t.secure)?t.secure:e.secure,storeUnencoded:r(t.storeUnencoded)?t.storeUnencoded:e.storeUnencoded}:e},t.safeDecodeURIComponent=function(e){try{return decodeURIComponent(e)}catch(t){return e}},t.safeJsonParse=function(e){try{return JSON.parse(e)}catch(t){return e}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(0);t.cookieServiceFactory=function(e){return new r.CookieService(e)}},function(e,t,o){"use strict";var r,n=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])},function(e,t){function o(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),i=this&&this.__decorate||function(e,t,o,r){var n,i=arguments.length,c=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,r);else for(var u=e.length-1;u>=0;u--)(n=e[u])&&(c=(i<3?n(c):i>3?n(t,o,c):n(t,o))||c);return i>3&&c&&Object.defineProperty(t,o,c),c},c=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},u=this&&this.__param||function(e,t){return function(o,r){t(o,r,e)}};Object.defineProperty(t,"__esModule",{value:!0});var s=o(2),a=o(0),f=o(1),p=function(e){function t(t,o,r){var n=e.call(this,r)||this;return n.request=t,n.response=o,n}return n(t,e),Object.defineProperty(t.prototype,"cookieString",{get:function(){return this.request.headers.cookie||""},set:function(e){this.request.headers.cookie=e,this.response.headers.cookie=e},enumerable:!0,configurable:!0}),t=i([s.Injectable(),u(0,s.Inject("REQUEST")),u(1,s.Inject("RESPONSE")),c("design:paramtypes",[Object,Object,f.CookieOptionsProvider])],t)}(a.CookieService);t.CookieBackendService=p},function(e,o){e.exports=t},function(e,t,o){"use strict";var r=this&&this.__decorate||function(e,t,o,r){var n,i=arguments.length,c=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,r);else for(var u=e.length-1;u>=0;u--)(n=e[u])&&(c=(i<3?n(c):i>3?n(t,o,c):n(t,o))||c);return i>3&&c&&Object.defineProperty(t,o,c),c};function n(e){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}Object.defineProperty(t,"__esModule",{value:!0});var i=o(2),c=o(1),u=o(0),s=o(4);n(o(0)),n(o(5)),n(o(1)),n(o(4)),n(o(3));var a=function(){function e(){}return t=e,e.forRoot=function(e){return void 0===e&&(e={}),{ngModule:t,providers:[{provide:c.COOKIE_OPTIONS,useValue:e},{provide:u.CookieService,useFactory:s.cookieServiceFactory,deps:[c.CookieOptionsProvider]}]}},e.forChild=function(e){return void 0===e&&(e={}),{ngModule:t,providers:[{provide:c.COOKIE_OPTIONS,useValue:e},{provide:u.CookieService,useFactory:s.cookieServiceFactory,deps:[c.CookieOptionsProvider]}]}},e=t=r([i.NgModule({providers:[c.CookieOptionsProvider]})],e);var t}();t.CookieModule=a}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,